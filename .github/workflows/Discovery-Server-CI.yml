name: Discovery Server CI

on:
  push:
    branches: [ main ]
    paths:
      - 'DiscoveryServer/**'

env:
  SERVICE_NAME: ${{ secrets.DISCOVERY_SERVER }}

jobs:
  build:
    name: Build MicroServer
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # Gradle 캐시 설정 추가
    - name: Gradle Caching 
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ${{ env.SERVICE_NAME }}/.gradle  # 프로젝트별 Gradle 캐시 디렉토리
        key: ${{ runner.os }}-gradle-${{ hashFiles('${{ env.SERVICE_NAME }}/gradle/wrapper/gradle-wrapper.properties', '${{ env.SERVICE_NAME }}/build.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./${{ env.SERVICE_NAME }}/gradlew

    - name: Build User Service
      run: |
        cd ./${{ env.SERVICE_NAME }}
        ./gradlew clean build -x test

    # DockerHub 로그인
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER_NAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker build & push
      run: |
        cd ${{ env.SERVICE_NAME }}
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile-dev -t ${{ secrets.DOCKER_USER_NAME }}/gachon-discovery-server:${{ secrets.DOCKER_TAG }} --push .

  # Deploy 시작
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      # SSH를 사용하여 원격 서버에 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          # key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Deploy 쉘 스크립트 실행"
            sudo ./deploy.sh